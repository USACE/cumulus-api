{
	"info": {
		"_postman_id": "2273ceeb-3854-4c0b-bc24-e07eb7329e6e",
		"name": "cumulus-regression-admin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "tags",
			"item": [
				{
					"name": "CreateTag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let r = JSON.parse(responseBody);",
									"pm.environment.set(\"new_tag_id\", r.id);",
									"pm.environment.set(\"new_tag_name\", r.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"name\": \"Regression Test Tag\",\n        \"description\": \"Test Product Tag for a Given Parameter\",\n        \"color\": \"A7F3D0\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// validate JSON schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"color\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"id\", \"name\", \"description\", \"color\"],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"pm.globals.set('TAG_OBJECT', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// validate schema",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags/{{new_tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{new_tag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListTags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// schema validator",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": JSON.parse(pm.globals.get('TAG_OBJECT'))",
									"}",
									"",
									"pm.globals.set('TAG_ARRAY', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateTag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{new_tag_id}}\",\n    \"name\": \"Updated Regression Test Tag\",\n    \"description\": \"Updated Test Product Tag for a Given Parameter\",\n    \"color\": \"2ca25f\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tags/{{new_tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{new_tag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteTag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"757c809c-dda0-412b-9831-cb9bd0f62d1d\",\n    \"slug\": \"nohrsc-snodas-swe\",\n    \"tags\": [\n        \"57bda84f-ecec-4cd7-b3b1-c0c36f838a05\"\n    ],\n    \"name\": \"New Name for NOHRSC SNODAS SWE\",\n    \"temporal_resolution\": 86400,\n    \"temporal_duration\": 0,\n    \"dss_fpart\": \"SNODAS\",\n    \"parameter_id\": \"683a55b9-4a94-46b5-9f47-26e66f3037a8\",\n    \"parameter\": \"SWE\",\n    \"unit_id\": \"e245d39f-3209-4e58-bfb7-4eae94b3f8dd\",\n    \"unit\": \"MM\",\n    \"description\": \"New Description for NOHRSC SNODAS SWE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tags/{{new_tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{new_tag_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "units",
			"item": [
				{
					"name": "GetUnit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// validate JSON schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"abbreviation\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"id\", \"name\", \"abbreviation\"],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"pm.globals.set('UNIT_OBJECT', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// validate schema",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/units/e245d39f-3209-4e58-bfb7-4eae94b3f8dd",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"units",
								"e245d39f-3209-4e58-bfb7-4eae94b3f8dd"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListUnits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// schema validator",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": JSON.parse(pm.globals.get('UNIT_OBJECT'))",
									"}",
									"",
									"pm.globals.set('UNIT_ARRAY', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/units",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"units"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUnit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('UNIT_OBJECT'))",
									"    )",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_create_unit_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"name\": \"Telsa\",\n        \"description\": \"Magnetic Field\",\n        \"abbreviation\": \"(T)\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/units",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"units"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUnit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('UNIT_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{new_create_unit_id}}\",\n    \"name\": \"Tesla - UPDATED\",\n    \"abbreviation\": \"(T) - UPDATED\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/units/{{new_create_unit_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"units",
								"{{new_create_unit_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUnit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{new_create_unit_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/units/{{new_create_unit_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"units",
								"{{new_create_unit_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "suites",
			"item": [
				{
					"name": "GetSuite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// validate JSON schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"slug\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"id\", \"name\", \"slug\", \"description\"],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"pm.globals.set('SUITE_OBJECT', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// validate schema",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/suites/c133e9e7-ddc8-4a98-82d7-880d5db35060",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"suites",
								"c133e9e7-ddc8-4a98-82d7-880d5db35060"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListSuites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// schema validator",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": JSON.parse(pm.globals.get('SUITE_OBJECT'))",
									"}",
									"",
									"pm.globals.set('SUITE_ARRAY', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/suites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"suites"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateSuite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('SUITE_OBJECT'))",
									"    )",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_create_suite_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"name\": \"Regression Test Suite\",\n        \"slug\": \"rts\",\n        \"description\": \"New Test Suite\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/suites",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"suites"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateSuite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('SUITE_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{new_create_suite_id}}\",\n    \"name\": \"Regression Test Suite - UPDATED\",\n    \"slug\": \"rts-updated\",\n    \"description\": \"New Test Suite - Updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/suites/{{new_create_suite_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"suites",
								"{{new_create_suite_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSuite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{new_create_suite_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/suites/{{new_create_suite_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"suites",
								"{{new_create_suite_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "parameters",
			"item": [
				{
					"name": "GetParameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// validate JSON schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"id\", \"name\"],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"pm.globals.set('PARAMETER_OBJECT', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// validate schema",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/parameters/5fab39b9-90ba-482a-8156-d863ad7c45ad",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"parameters",
								"5fab39b9-90ba-482a-8156-d863ad7c45ad"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListParameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// schema validator",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": JSON.parse(pm.globals.get('PARAMETER_OBJECT'))",
									"}",
									"",
									"pm.globals.set('PARAMETER_ARRAY', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/parameters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateParameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('PARAMETER_OBJECT'))",
									"    )",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"new_create_parameter_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"name\": \"Regression Test Parameter 1\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/parameters",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"parameters"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateParameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('PARAMETER_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{new_create_parameter_id}}\",\n    \"name\": \"Regression Test Parameter 1 - UPDATED\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/parameters/{{new_create_parameter_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"parameters",
								"{{new_create_parameter_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteParameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{new_create_parameter_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/parameters/{{new_create_parameter_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"parameters",
								"{{new_create_parameter_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "acquirables",
			"item": [
				{
					"name": "ListAcquirables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/acquirables",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"acquirables"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateAcquirablefile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"dynamic_acquirablefile_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"datetime\": \"2014-01-01T00:00:00Z\",\n    \"file\": \"cumulus/nohrsc_snodas_unmasked/SNODAS_unmasked_20140101.tar\",\n    \"acquirable_id\": \"87819ceb-72ee-496d-87db-70eb302302dc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/acquirablefiles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"acquirablefiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListAcquirablefiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/acquirables/87819ceb-72ee-496d-87db-70eb302302dc/files?after=2010-03-29&before=2030-01-01",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"acquirables",
								"87819ceb-72ee-496d-87db-70eb302302dc",
								"files"
							],
							"query": [
								{
									"key": "after",
									"value": "2010-03-29"
								},
								{
									"key": "before",
									"value": "2030-01-01"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "products",
			"item": [
				{
					"name": "GetProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// validate JSON schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"slug\": { \"type\": \"string\" },",
									"        \"tags\": {",
									"            \"type\": \"array\",",
									"            \"items\": { \"type\": \"string\" },",
									"        },",
									"        \"name\": { \"type\": \"string\" },",
									"        \"temporal_resolution\": { \"type\": \"number\" },",
									"        \"temporal_duration\": { \"type\": \"number\" },",
									"        \"dss_fpart\": { \"type\": \"string\" },",
									"        \"dss_datatype\": { \"type\": \"string\" },",
									"        \"parameter_id\": { \"type\": \"string\" },",
									"        \"parameter\": { \"type\": \"string\" },",
									"        \"unit_id\": { \"type\": \"string\" },",
									"        \"unit\": { \"type\": \"string\" },",
									"        \"description\": { \"type\": \"string\" },",
									"        \"after\": {\"type\": [\"null\", \"string\"]},",
									"        \"before\": {\"type\": [\"null\", \"string\"]},",
									"        \"last_forecast_version\": {\"type\": [\"null\", \"string\"]},",
									"        \"productfile_count\": {\"type\": \"number\"},",
									"        \"suite_id\" : { \"type\": \"string\"},",
									"        \"suite\" : { \"type\": \"string\"},",
									"        \"label\" : { \"type\": [\"null\", \"string\"]}",
									"    },",
									"    \"required\": [\"id\", \"slug\", \"tags\", \"name\", \"temporal_resolution\", \"temporal_duration\", \"dss_fpart\",",
									"                 \"parameter_id\", \"parameter\", \"unit_id\", \"unit\", \"suite_id\", \"suite\", \"description\", \"after\", \"before\", \"last_forecast_version\", \"productfile_count\"",
									"    ],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"pm.globals.set('PRODUCT_OBJECT', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// validate schema",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// schema validator",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": JSON.parse(pm.globals.get('PRODUCT_OBJECT'))",
									"}",
									"",
									"pm.globals.set('PRODUCT_ARRAY', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListProductFiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// schema validator",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": { ",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"id\": { \"type\": \"string\"},",
									"            \"datetime\": { \"type\": \"string\"},",
									"            \"file\": { \"type\": \"string\"}",
									"        },",
									"        \"required\": [\"id\", \"datetime\", \"file\"],",
									"        \"additionalProperties\": false",
									"    }",
									"}",
									"",
									"pm.globals.set('PRODUCTFILE_ARRAY', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d/files?after=2020-01-01&before=2020-02-01",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d",
								"files"
							],
							"query": [
								{
									"key": "after",
									"value": "2020-01-01"
								},
								{
									"key": "before",
									"value": "2020-02-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListProductAvailability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// schema validator",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"product_id\":  { \"type\": \"string\"},",
									"        \"date_counts\": { ",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\": {",
									"                    \"date\": {\"type\": \"string\" },",
									"                    \"count\": {\"type\": \"number\"}",
									"                },",
									"                \"required\": [\"date\", \"count\"],",
									"                \"additionalProperties\": false",
									"            }",
									"        }",
									"    },",
									"    \"required\": [\"product_id\", \"date_counts\"],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d/availability",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d",
								"availability"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Ingest Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// validate JSON schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"properties\": {",
									"        \"slug\": { \"type\": \"string\" },",
									"        \"latest_product_datetime\": {\"type\": [\"null\", \"string\"]},",
									"        \"acceptable_timedelta\": {\"type\": [\"null\", \"string\"]},",
									"        \"actual_timedelta\": {\"type\": [\"null\", \"string\"]},",
									"        \"is_current\": {\"type\": \"boolean\"}",
									"    },",
									"    \"required\": [\"slug\", \"is_current\"],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"pm.globals.set('PRODUCT_INGEST_OBJECT', JSON.stringify(schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// validate schema",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/product_ingest_status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product_ingest_status"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('PRODUCT_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"label\": \"TEST-LABEL\",\n    \"temporal_resolution\": 200,\n    \"temporal_duration\": 0,\n    \"dss_fpart\": \"INTEGRATION TEST PRODUCT\",\n    \"dss_datatype_id\": \"392f8984-2e4e-47ea-ae24-dad81d87f662\",\n    \"parameter_id\": \"683a55b9-4a94-46b5-9f47-26e66f3037a8\",\n    \"unit_id\": \"e245d39f-3209-4e58-bfb7-4eae94b3f8dd\",\n    \"description\": \"Example Product Description\",\n    \"suite_id\": \"c133e9e7-ddc8-4a98-82d7-880d5db35060\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProductfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\n    \"file\": \"cumulus/products/nohrsc-snodas-swe/bogus_test_zz_ssmv11034tS__T0001TTNATS2022081005HP001.tif\",\n    \"datetime\": \"2014-01-01T00:00:00Z\",\n    \"acquirablefile_id\": \"{{dynamic_acquirablefile_id}}\",\n    \"product_id\": \"757c809c-dda0-412b-9831-cb9bd0f62d1d\",\n    \"version\": null\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/productfiles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"productfiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('PRODUCT_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"757c809c-dda0-412b-9831-cb9bd0f62d1d\",\n    \"label\": \"UPDATED LABEL\",\n    \"slug\": \"nohrsc-snodas-swe\",\n    \"tags\": [\n        \"57bda84f-ecec-4cd7-b3b1-c0c36f838a05\"\n    ],\n    \"name\": \"New Name for NOHRSC SNODAS SWE\",\n    \"temporal_resolution\": 86400,\n    \"temporal_duration\": 0,\n    \"dss_fpart\": \"SNODAS\",\n    \"dss_datatype_id\": \"f13182ec-8944-494e-b947-994b189d62f2\",\n    \"parameter_id\": \"683a55b9-4a94-46b5-9f47-26e66f3037a8\",\n    \"parameter\": \"SWE\",\n    \"unit_id\": \"e245d39f-3209-4e58-bfb7-4eae94b3f8dd\",\n    \"unit\": \"MM\",\n    \"description\": \"New Description for NOHRSC SNODAS SWE\",\n    \"suite_id\": \"c133e9e7-ddc8-4a98-82d7-880d5db35060\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d"
							]
						}
					},
					"response": []
				},
				{
					"name": "TagProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('PRODUCT_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Product Created by Integration Tests\",\n    \"temporal_resolution\": 200,\n    \"temporal_duration\": 0,\n    \"dss_fpart\": \"INTEGRATION TEST PRODUCT\",\n    \"parameter_id\": \"683a55b9-4a94-46b5-9f47-26e66f3037a8\",\n    \"parameter\": \"SWE\",\n    \"unit_id\": \"e245d39f-3209-4e58-bfb7-4eae94b3f8dd\",\n    \"unit\": \"MM\",\n    \"description\": \"Example Product Description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d/tags/cc93b3f9-fbe1-4b35-8f9c-2d1515961c6a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d",
								"tags",
								"cc93b3f9-fbe1-4b35-8f9c-2d1515961c6a"
							]
						}
					},
					"response": []
				},
				{
					"name": "UntagProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('PRODUCT_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"New Product Created by Integration Tests\",\n    \"temporal_resolution\": 200,\n    \"temporal_duration\": 0,\n    \"dss_fpart\": \"INTEGRATION TEST PRODUCT\",\n    \"parameter_id\": \"683a55b9-4a94-46b5-9f47-26e66f3037a8\",\n    \"parameter\": \"SWE\",\n    \"unit_id\": \"e245d39f-3209-4e58-bfb7-4eae94b3f8dd\",\n    \"unit\": \"MM\",\n    \"description\": \"Example Product Description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d/tags/cc93b3f9-fbe1-4b35-8f9c-2d1515961c6a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d",
								"tags",
								"cc93b3f9-fbe1-4b35-8f9c-2d1515961c6a"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"757c809c-dda0-412b-9831-cb9bd0f62d1d\",\n    \"slug\": \"nohrsc-snodas-swe\",\n    \"tags\": [\n        \"57bda84f-ecec-4cd7-b3b1-c0c36f838a05\"\n    ],\n    \"name\": \"New Name for NOHRSC SNODAS SWE\",\n    \"temporal_resolution\": 86400,\n    \"temporal_duration\": 0,\n    \"dss_fpart\": \"SNODAS\",\n    \"parameter_id\": \"683a55b9-4a94-46b5-9f47-26e66f3037a8\",\n    \"parameter\": \"SWE\",\n    \"unit_id\": \"e245d39f-3209-4e58-bfb7-4eae94b3f8dd\",\n    \"unit\": \"MM\",\n    \"description\": \"New Description for NOHRSC SNODAS SWE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d"
							]
						}
					},
					"response": []
				},
				{
					"name": "UndeleteProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(",
									"        JSON.parse(pm.globals.get('PRODUCT_OBJECT'))",
									"    )",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"757c809c-dda0-412b-9831-cb9bd0f62d1d\",\n    \"slug\": \"nohrsc-snodas-swe\",\n    \"tags\": [\n        \"57bda84f-ecec-4cd7-b3b1-c0c36f838a05\"\n    ],\n    \"name\": \"New Name for NOHRSC SNODAS SWE\",\n    \"temporal_resolution\": 86400,\n    \"temporal_duration\": 0,\n    \"dss_fpart\": \"SNODAS\",\n    \"parameter_id\": \"683a55b9-4a94-46b5-9f47-26e66f3037a8\",\n    \"parameter\": \"SWE\",\n    \"unit_id\": \"e245d39f-3209-4e58-bfb7-4eae94b3f8dd\",\n    \"unit\": \"MM\",\n    \"description\": \"New Description for NOHRSC SNODAS SWE\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/products/757c809c-dda0-412b-9831-cb9bd0f62d1d/undelete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d",
								"undelete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "downloads",
			"item": [
				{
					"name": "ListDownloads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"datetime_start\": \"2020-12-01T01:00:00Z\",\n\t\"datetime_end\": \"2020-12-10T01:00:00Z\",\n\t\"watershed_id\": \"3e8db268-d9ca-47ec-ae93-21a3c2bcf0a1\",\n\t\"product_id\": [\n        \"30a6d443-80a5-49cc-beb0-5d3a18a84caa\"\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/downloads",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"downloads"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateDownload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"dynamic_download_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"datetime_start\": \"2020-12-01T01:00:00Z\",\n\t\"datetime_end\": \"2020-12-10T01:00:00Z\",\n\t\"watershed_id\": \"3e8db268-d9ca-47ec-ae93-21a3c2bcf0a1\",\n\t\"product_id\": [\n        \"30a6d443-80a5-49cc-beb0-5d3a18a84caa\"\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/downloads",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"downloads"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateDownload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{dynamic_download_id}}\",\n    \"status_id\": \"3914f0bd-2290-42b1-bc24-41479b3a846f\",\n\t\"progress\": 100,\n\t\"file\": \"3e8db268-d9ca-47ec-ae93-21a3c2bcf0a1\",\n\t\"manifest\": {\n        \"size_bytes\": 2000000,\n        \"filecount\": 15\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/downloads/{{dynamic_download_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"downloads",
								"{{dynamic_download_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateDownloadAirtemp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"datetime_start\": \"2020-11-18T06:00:00Z\",\n\t\"datetime_end\": \"2020-12-02T06:00:00Z\",\n\t\"watershed_id\": \"f019ffec-e9d3-48e6-ab74-eaa8fd8065e0\",\n\t\"product_id\": [\n\t\t\"e4fdadc7-5532-4910-9ed7-3c3690305d86\"\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/downloads",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"downloads"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "watersheds",
			"item": [
				{
					"name": "ListWatersheds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/watersheds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetWatershed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/watersheds/c785f4de-ab17-444b-b6e6-6f1ad16676e8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"c785f4de-ab17-444b-b6e6-6f1ad16676e8"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateWatershed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Test Watershed\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/watersheds",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateWatershed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"c785f4de-ab17-444b-b6e6-6f1ad16676e8\",\n    \"slug\": \"cumberland-basin-river\",\n    \"name\": \"Cumberland River Basin Updated Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/watersheds/c785f4de-ab17-444b-b6e6-6f1ad16676e8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"c785f4de-ab17-444b-b6e6-6f1ad16676e8"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteWatershed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"c785f4de-ab17-444b-b6e6-6f1ad16676e8\",\n    \"slug\": \"cumberland-basin-river\",\n    \"name\": \"Cumberland River Basin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/watersheds/c785f4de-ab17-444b-b6e6-6f1ad16676e8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"c785f4de-ab17-444b-b6e6-6f1ad16676e8"
							]
						}
					},
					"response": []
				},
				{
					"name": "UndeleteWatershed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"c785f4de-ab17-444b-b6e6-6f1ad16676e8\",\n    \"slug\": \"cumberland-basin-river\",\n    \"name\": \"Cumberland River Basin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/watersheds/c785f4de-ab17-444b-b6e6-6f1ad16676e8/undelete",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"c785f4de-ab17-444b-b6e6-6f1ad16676e8",
								"undelete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "area_group",
			"item": [
				{
					"name": "EnableAreaGroupProductStatistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/watersheds/ad30f178-afc3-43b9-ba92-7bd139581217/area_groups/e3fd63a1-f19f-4bf3-b436-1c7086b7afe7/products/757c809c-dda0-412b-9831-cb9bd0f62d1d/statistics/enable",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"ad30f178-afc3-43b9-ba92-7bd139581217",
								"area_groups",
								"e3fd63a1-f19f-4bf3-b436-1c7086b7afe7",
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d",
								"statistics",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "DisableAreaGroupProductStatistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/watersheds/ad30f178-afc3-43b9-ba92-7bd139581217/area_groups/e3fd63a1-f19f-4bf3-b436-1c7086b7afe7/products/757c809c-dda0-412b-9831-cb9bd0f62d1d/statistics/disable",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"ad30f178-afc3-43b9-ba92-7bd139581217",
								"area_groups",
								"e3fd63a1-f19f-4bf3-b436-1c7086b7afe7",
								"products",
								"757c809c-dda0-412b-9831-cb9bd0f62d1d",
								"statistics",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListWatershedAreaGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/watersheds/c785f4de-ab17-444b-b6e6-6f1ad16676e8/area_groups",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"c785f4de-ab17-444b-b6e6-6f1ad16676e8",
								"area_groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListAreaGroupAreas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/watersheds/c785f4de-ab17-444b-b6e6-6f1ad16676e8/area_groups/e3fd63a1-f19f-4bf3-b436-1c7086b7afe7/areas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"watersheds",
								"c785f4de-ab17-444b-b6e6-6f1ad16676e8",
								"area_groups",
								"e3fd63a1-f19f-4bf3-b436-1c7086b7afe7",
								"areas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dss_datatypes",
			"item": [
				{
					"name": "ListDssDatatypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// JSON object schema",
									"var object_schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": { \"type\": \"string\" },",
									"        \"name\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"id\", \"name\"],",
									"    \"additionalProperties\": false",
									"}",
									"",
									"pm.globals.set('DSS_DATATYPE_OBJECT', JSON.stringify(object_schema));",
									"",
									"// schema validator",
									"var array_schema = {",
									"    \"type\": \"array\",",
									"    \"items\": JSON.parse(pm.globals.get('DSS_DATATYPE_OBJECT'))",
									"}",
									"",
									"pm.globals.set('DSS_DATATYPE_ARRAY', JSON.stringify(array_schema));",
									"",
									"// status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// schema validation",
									"pm.test(\"Schema validation\", function () {",
									"    pm.response.to.have.jsonSchema(array_schema)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/dss/datatypes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dss",
								"datatypes"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_existing_admin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}